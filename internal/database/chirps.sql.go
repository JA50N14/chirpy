// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const postChirp = `-- name: PostChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    NOW(), 
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type PostChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) PostChirp(ctx context.Context, arg PostChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, postChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const retrieveChirp = `-- name: RetrieveChirp :one
SELECT id, created_at, updated_at, body, user_id FROM chirps
WHERE id = $1
`

func (q *Queries) RetrieveChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, retrieveChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const retrieveChirps = `-- name: RetrieveChirps :many
SELECT id, created_at, updated_at, body, user_id FROM chirps
ORDER BY created_at
`

func (q *Queries) RetrieveChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, retrieveChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
